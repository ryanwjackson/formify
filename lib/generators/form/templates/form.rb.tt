# frozen_string_literal: true

<% module_namespacing do -%>
class <%= form_name %>
  include Formify::Form

  attr_accessor :<%= attributes_with_delegates.first %><%= ',' if attributes_with_delegates.count > 1 %>
<% attributes[1..-1].each_with_index do |attr, i| -%>
                :<%= attr %><%= ',' unless attributes_with_delegates.count - 2 == i %>
<% end -%>

<% delegated_attributes.each do |to_attr, delegates| -%>
  delegate_accessor :<%= delegates.first %>,
<% delegates[1..-1].each_with_index do |attr, i| -%>
                    :<%= attr %>,
<% end -%>
                    to: :<%= to_attr %>
<% end -%>

  before_validation :before_validation_do_something

  validates_presence_of :<%= all_attributes.first %><%= ',' if all_attributes.count > 1 %>
<% all_attributes[1..-1].each_with_index do |attr, i| -%>
                        :<%= attr %><%= ',' unless all_attributes.count - 2 == i %>
<% end -%>

  # validate :validate_something

  initialize_with :<%= attributes_with_delegates.join(', :') %> do |attributes|
<% if create? -%>
    @<% collection.singularize %> ||= <% inferred_model_name %>.new

<% end -%>
    puts attributes
  end

  def save
    raise NotImplementedError

    with_advisory_lock_transaction(:foo) do
      validate_or_fail
        .and_then { <%= name.split('/').reverse[0..1].map(&:singularize).join('_').underscore %> }
        .and_then { success(<%= return_attribute %>) }
    end
  end

  private

  def <%= name.split('/').reverse[0..1].map(&:singularize).join('_').underscore %>
    raise NotImplementedError

    success(<%= return_attribute %>)
  end

  # def before_validation_do_something
  # end

  # def validate_something
  # end
end
<% end -%>
